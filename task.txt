create database Zenclass

use Zenclass

CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    joined_at DATE,
    status ENUM('active', 'inactive'),
    codekata_problems_solved INT DEFAULT 0,
    mentee_count INT DEFAULT 0
);

CREATE TABLE codekata (
    codekata_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    problem_id VARCHAR(50),
    solved_at DATE,
    status ENUM('solved', 'pending'),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    date DATE,
    status ENUM('present', 'absent'),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

CREATE TABLE topics (
    topic_id INT AUTO_INCREMENT PRIMARY KEY,
    topic_name VARCHAR(100),
    taught_at DATE,
    subject VARCHAR(50),
    instructor VARCHAR(100)
);
CREATE TABLE tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    task_name VARCHAR(100),
    due_date DATE,
    assigned_by VARCHAR(100),
    topic_id INT,
    assigned_to INT,
    FOREIGN KEY (topic_id) REFERENCES topics(topic_id),
    FOREIGN KEY (assigned_to) REFERENCES users(user_id)
);

CREATE TABLE company_drives (
    drive_id INT AUTO_INCREMENT PRIMARY KEY,
    company_name VARCHAR(100),
    drive_date DATE,
    placement_type ENUM('internship', 'full-time'),
    students_appeared TEXT  -- Comma-separated list of user IDs
);

CREATE TABLE mentors (
    mentor_id INT AUTO_INCREMENT PRIMARY KEY,
    mentor_name VARCHAR(100),
    total_mentees INT DEFAULT 0
);

CREATE TABLE mentor_mentees (
    mentor_id INT,
    user_id INT,
    PRIMARY KEY (mentor_id, user_id),
    FOREIGN KEY (mentor_id) REFERENCES mentors(mentor_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

INSERT INTO users (name, email, joined_at, status, codekata_problems_solved, mentee_count)
VALUES 
('John Doe', 'john@example.com', '2024-01-15', 'active', 20, 5),
('Jane Smith', 'jane@example.com', '2024-02-10', 'active', 15, 10),
('Alice Brown', 'alice@example.com', '2024-03-05', 'inactive', 8, 3);

INSERT INTO codekata (user_id, problem_id, solved_at, status)
VALUES 
(1, 'PROB123', '2024-10-05', 'solved'),
(1, 'PROB124', '2024-10-10', 'solved'),
(2, 'PROB125', '2024-10-12', 'pending');

INSERT INTO attendance (user_id, date, status)
VALUES 
(1, '2024-10-16', 'present'),
(1, '2024-10-17', 'absent'),
(2, '2024-10-17', 'absent'),
(2, '2024-10-18', 'present');


INSERT INTO topics (topic_name, taught_at, subject, instructor)
VALUES 
('Data Structures', '2024-10-01', 'Computer Science', 'Dr. A. Smith'),
('Algorithms', '2024-10-05', 'Computer Science', 'Dr. B. Johnson');


INSERT INTO tasks (task_name, due_date, assigned_by, topic_id, assigned_to)
VALUES 
('Task 1: Arrays', '2024-10-10', 'Dr. A. Smith', 1, 1),
('Task 2: Sorting', '2024-10-15', 'Dr. B. Johnson', 2, 2);

INSERT INTO company_drives (company_name, drive_date, placement_type, students_appeared)
VALUES 
('Company A', '2020-10-16', 'full-time', '1,2'),
('Company B', '2020-10-20', 'internship', '1');

INSERT INTO mentors (mentor_name, total_mentees)
VALUES 
('Mr. X', 20),
('Ms. Y', 10);

INSERT INTO mentor_mentees (mentor_id, user_id)
VALUES 
(1, 1),
(1, 2),
(2, 2);





-- 1.Find all the topics and tasks which were taught in the month of October
-- Find topics taught in October
SELECT * FROM topics
WHERE MONTH(taught_at) = 10 AND YEAR(taught_at) = 2024;

-- Find tasks assigned in October
SELECT * FROM tasks
WHERE MONTH(due_date) = 10 AND YEAR(due_date) = 2024;

-- 2.Find all the company drives which appeared between 15 Oct 2020 and 31 Oct 2020

SELECT * FROM company_drives
WHERE drive_date BETWEEN '2020-10-15' AND '2020-10-31';

-- 3: Find all the company drives and students who appeared for the placement

SELECT cd.company_name, u.name AS student_name, u.email
FROM company_drives cd
JOIN users u ON FIND_IN_SET(u.user_id, cd.students_appeared) > 0;

-- 4: Find the number of problems solved by the user in Codekata

SELECT COUNT(*) AS solved_problems
FROM codekata
WHERE user_id = user_id AND status = 'solved';


-- 5: Find all the mentors who have more than 15 mentees
SELECT mentor_name, total_mentees
FROM mentors
WHERE total_mentees > 15;

--  6: Find the number of users who are active
SELECT COUNT(*) AS active_users
FROM users
WHERE status = 'active';





